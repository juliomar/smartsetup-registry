# TMS Smart Setup definition file for Kastri
# Do not modify this file. To configure smart setup, edit tms.config.yaml instead.
minimum required tmsbuild version: 2.0
  
application:
  id: delphiworlds.kastri # use a short descriptive name in the form company.product. This id will be used everywhere by tms smart setup to refer to this product.
  name: Kastri
  url: https://github.com/DelphiWorlds/Kastri
  docs: 
#  version file: version.txt  # if this line is present, then version.txt must exist, it must have at least one line, 
                             # and the line must be "something: version". like for example "tms.example: 1.0.3". 
                             # The text after ":" will be used as version number to display along the name.


supported frameworks:
  fmx:
    ide since: delphi12
    platforms:
      - win32intel
      - win64intel
      - macos64intel
      - macos64arm
      - iosdevice64
      - iossimulator64arm
      - android32
      - android64
      #- linux64

    c++ builder support: true

packages:
  - KastriFMX: [runtime, fmx]
  - KastriAdMob: [runtime, fmx]
  - KastriBuild: [runtime, fmx]

# The settings in this section are only needed if the packages don't follow smartsetup conventions
package options:
  # By default, smartsetup double-checks that the dproj it is going to compile supports the platforms you specified above in the "packages" section.
  # But some packages might have wrong data in the dproj. If you set this to true, smartsetup will ignore whatever the dproj says and only use the info in "packages" 
  ignore dproj platforms: true

  # This shouldn't be needed in general. Smartsetup will find your packages wherever they are.
  # But sometimes you might have the same packages in different folders and SmartSetup will get confused
  # about which ones it has to use. In this case, you can specify the relative path here where SmartSetup will start looking for packages.
  root package folder: .


  # Use this section only if you are not using the standard smartsetup folders for the packages.
  # Note that if the same folder supports for example Delphi 11 and Delphi 12 (by using Lbsuffix $(auto)), you can 
  # write the same folder for 11 and 12.
  package folders:
    delphi11+: packages

paths:
  # the paths below are pattern-matched with the existing library path (case insensitive), and they will be passed to the compiler if they match.
  # Smart setup by default doesn't pass the library path in the user's machine to the compiler, to avoid errors due to broken
  # library paths. Use this only when you need some component like fmxlinux which is not a smart-setup dependency and not something that comes built-in in delphi.
  search paths to preserve:
    - *fmxlinux*

  # this is similar to "extra library paths" above (and all the comments also apply here), but this path will only be added when compiling
  # with msbuild. "extra library paths" will be added when compiling with msbuild, but also registered in Rad Studio. Entries here won't be registered.
  # normally you will use this entries to fix buggy packages that you can't modify. It shouldn't be needed in normal cases and correct packages.
  build-only library paths:
    - API
    - Controls

 

